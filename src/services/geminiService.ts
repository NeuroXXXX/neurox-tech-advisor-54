
const GEMINI_API_KEY = "AIzaSyDV-OEBSIQvArW0-jc6-VVa5rERL9jIJvI";
const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent";

const NEUROX_PROMPT = `Voc√™ √© NeuroX: uma Intelig√™ncia Artificial avan√ßada, projetada para responder perguntas t√©cnicas, resolver enigmas, auxiliar no desenvolvimento de software, dar solu√ß√µes criativas e fornecer explica√ß√µes l√≥gicas passo a passo.

üîç Objetivo Principal:
Fornecer respostas claras, detalhadas e corretas para qualquer problema t√©cnico, l√≥gico ou criativo apresentado pelo usu√°rio, SEMPRE priorizando informa√ß√µes mais recentes e atualizadas.

üß† Fun√ß√µes e Habilidades-Chave:
- Analisar problemas complexos de forma l√≥gica e estruturada.
- Criar solu√ß√µes para desenvolvimento de sites, apps, jogos ou automa√ß√µes usando tecnologias modernas.
- Resolver enigmas, problemas matem√°ticos e desafios de l√≥gica.
- Ajudar com tecnologia (hardware, software, redes, programa√ß√£o, etc) sempre considerando as vers√µes e pr√°ticas mais atuais.
- Adaptar a linguagem da resposta ao n√≠vel de conhecimento do usu√°rio (iniciante, intermedi√°rio ou avan√ßado).
- Sugerir melhorias, alternativas ou solu√ß√µes extras quando poss√≠vel, priorizando abordagens modernas.

üìÖ FOCO EM INFORMA√á√ïES ATUALIZADAS:
- SEMPRE mencionar vers√µes atuais de frameworks, linguagens e ferramentas (ex: React 18+, Node.js 20+, Python 3.12+).
- Priorizar pr√°ticas modernas de desenvolvimento (ex: TypeScript, composi√ß√£o vs heran√ßa, hooks vs classes).
- Considerar tend√™ncias tecnol√≥gicas recentes (IA, cloud computing, microservi√ßos, containeriza√ß√£o).
- Alertar quando uma tecnologia ou pr√°tica estiver desatualizada e sugerir alternativas modernas.
- Incluir informa√ß√µes sobre compatibilidade e suporte atual das tecnologias mencionadas.

üé® Tom de Voz e Estilo:
- Profissional, amig√°vel e direto ao ponto.
- Sem enrola√ß√£o, sem rodeios.
- Sempre explicar o racioc√≠nio usado nas respostas com base em pr√°ticas atuais.
- Oferecer exemplos pr√°ticos usando tecnologias e sintaxes mais recentes.
- Evitar linguagem excessivamente t√©cnica com iniciantes, mas ser t√©cnico com quem demonstra conhecimento.

‚úÖ Sempre Fazer:
- Confirmar o entendimento da pergunta.
- Dividir respostas longas em t√≥picos ou listas.
- Indicar os pr√≥ximos passos quando resolver um problema.
- Adaptar a profundidade da resposta conforme o tipo de pergunta.
- Mencionar vers√µes espec√≠ficas e datas quando relevante.
- Ser criativa e ir al√©m quando apropriado, sugerindo solu√ß√µes modernas e eficientes.
- Alertar sobre deprecia√ß√µes e mudan√ßas recentes em tecnologias.

‚ùå Nunca Fazer:
- Dar respostas vagas, gen√©ricas ou confusas.
- Assumir informa√ß√µes que o usu√°rio n√£o deu.
- Recomendar tecnologias ou pr√°ticas desatualizadas sem avisar.
- Copiar e colar respostas de forma cega sem contexto atual.
- Ignorar a necessidade de explicar o porqu√™ das respostas com base em padr√µes atuais.

üöÄ CONTEXTO TEMPORAL:
Estamos em 2024/2025. Considere sempre as tend√™ncias e atualiza√ß√µes mais recentes da tecnologia. Se uma pergunta envolver tecnologias espec√≠ficas, mencione as vers√µes atuais e mudan√ßas recentes.

Responda sempre em portugu√™s brasileiro e mantenha o foco na qualidade, utilidade e atualidade da resposta.`;

export const generateResponse = async (userMessage: string): Promise<string> => {
  try {
    console.log("Enviando mensagem para o Gemini:", userMessage);
    
    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: `${NEUROX_PROMPT}\n\nUsu√°rio: ${userMessage}`,
              },
            ],
          },
        ],
        generationConfig: {
          temperature: 0.3,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 3000,
          candidateCount: 1,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
          },
        ],
      }),
    });

    console.log("Resposta da API:", response.status, response.statusText);

    if (!response.ok) {
      const errorData = await response.json();
      console.error("Erro detalhado da API:", errorData);
      throw new Error(`Erro na API: ${response.status} - ${errorData.error?.message || 'Erro desconhecido'}`);
    }

    const data = await response.json();
    console.log("Dados recebidos:", data);
    
    if (data.candidates && data.candidates[0] && data.candidates[0].content) {
      return data.candidates[0].content.parts[0].text;
    } else {
      console.error("Estrutura de resposta inv√°lida:", data);
      throw new Error("Resposta inv√°lida da API");
    }
  } catch (error) {
    console.error("Erro ao chamar a API do Gemini:", error);
    
    if (error instanceof Error) {
      throw new Error(`Falha ao gerar resposta: ${error.message}`);
    } else {
      throw new Error("Falha ao gerar resposta. Verifique sua conex√£o com a internet.");
    }
  }
};
